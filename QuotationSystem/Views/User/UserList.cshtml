@model QuotationSystem.Models.User.UserViewModel
@{
    ViewData["Title"] = "User List";
}
<div class="p-3 animated fadeInRight">
    <div class="d-flex flex-column" style="gap: 1rem">
        <!--Search form-->
        <form class="ibox-content" id="search-criteria" style="row-gap:1rem;">
            <div class="container">
                <div class="row m-0" style="row-gap:1rem;">
                    <div class="col-md-6">
                        <div class="row align-items-center">
                            <h4 class="col-sm-4 p-0 text-sm-right">UserID:</h4>
                            <div class="col-sm-8">
                                <input class="form-control" id="textId" type="text" />
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="row align-items-center">
                            <h4 class="col-sm-4 col-md-2 p-0 text-sm-right">Name:</h4>
                            <div class="col-sm-8">
                                <input class="form-control" id="textName" type="text" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row m-0 mt-3" style="row-gap:1rem;">
                    <div class="col-md-6">
                        <div class="row align-items-center">
                            <h4 class="col-sm-4 p-0 text-sm-right">Department:</h4>
                            <div class="col-sm-8">
                                <input class="form-control" id="textDepartment" type="text" />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-sm-4 col-md-2 label-1pv">&nbsp;</div>
                            <div class="col-sm-8">
                                <button type="button" class="btn btn-success" id="search-button"><i class="fa-solid fa-magnifying-glass"></i> Search</button>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </form>
        
        <!--Modal-->
        <partial name="_AddUserPartial" model="Model.UserModal"/>
        @*<vc:add-user-modal></vc:add-user-modal>*@

        <!--table-->
        <div class="table-responsive ibox-content">
            <div class="d-flex w-100 justify-content-end mb-2">
                <button class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter"><i class="fa-solid fa-plus"></i> Add New</button>
            </div>
            <table id="user-table" class="table table-bordered table-hover table-striped" style="width:100%;" cellspacing="0"></table>
        </div>
    </div>
</div>

<!--Modal-->
<form asp-controller="User" asp-action="ResetPassword" method="post" id="reset-password">
</form>
<div id="edit-user">
</div>
<form asp-controller="User" asp-action="DeleteUser" method="post" id="delete-user">
</form>
@section Scripts{
    <script>
        $(document).ready(() => {
            var colOptions = [
                { title: "No", render: (data, type, row, meta) => meta.row + meta.settings._iDisplayStart + 1, className: "text-center" },
                { title: "User ID", data: "userId" },
                { title: "Name", data: "userName" },
                { title: "Department", data: "departmentId" },
                { title: "Status", data: "activeStatus", className: "text-center", render: renderActiveStatus },
                { title: "Reset Password", data: "userId", className: "text-center", render: renderResetPasswordButtons },
                { title: "User Management", data: "mUserPermissions", className: "text-center", render: renderUserCheckMark },
                { title: "Item Management", data: "mUserPermissions", className: "text-center", render: renderItemCheckMark },
                { title: "Quotation Management", data: "mUserPermissions", className: "text-center", render: renderQuotationCheckMark },
                { title: "Action", data: "userId", render: renderActionButtons }
            ];
            table = $('#user-table').DataTable({
                "processing": true,
                "serverSide": true,
                "bLengthChange": false,
                "bFilter": true,
                "searching": false,
                "pageLength": 20,
                "displayStart": 0,
                "scrollX": true,
                "ajax": {
                    url: '@Url.Action("Search")',
                    type: "POST",
                    data: (opt) => {
                        console.log($('#search-criteria').serializeToJSON());
                        //console.table(opt);
                        return {
                            userId: `${$('#textId').val()}`,
                            name: `${$('#textName').val()}`,
                            department: `${$('#textDepartment').val()}`,
                            option: opt
                        };
                    },
                    error: handlerDataTableError
                },
                "columns": colOptions,
            });

            $("#search-button").click(() => {
                table.ajax.reload();
            });
        });

        function renderActionButtons(data, type, row) {
            if (row.activeStatus === 'Y') {
                return `<div class="d-flex justify-content-center" style="gap:.5rem">
                            <button class="btn btn-primary" onclick="editUser('${data}')"> <i class="fa-regular fa-pen-to-square"></i></button>
                        </div>`;
            }
            return `<div class="d-flex justify-content-center" style="gap:.5rem">
                        <button class="btn btn-primary" onclick="editUser('${data}')"> <i class="fa-regular fa-pen-to-square"></i></button>
                        <button class="btn btn-danger" onclick="deleteUserSwal('${data}')"><i class="fa-solid fa-trash-can"></i></button>
                     </div>`;
        }
        function renderResetPasswordButtons(data, type, row) {
            return `<button class="btn btn-warning btn-sm" onclick="resetPassword('${data}')"><i class="fa-solid fa-arrows-rotate"></i></button>`;
        }
        function renderUserCheckMark(data, type, row) {
            //console.log(data);
            if (data.some((p) => p.menuId === 'USS010' && p.activeStatus === 'Y')) {
                return `<i class="fa-solid fa-check"></i>`;
            }
            return '';
        }
        function renderActiveStatus(data, type, row) {
            return data == 'Y' ? '<div class="text-success">Active</div>' : '<div class="text-danger">Inactive</div>';
        }
        function renderItemCheckMark(data, type, row) {
            //console.log(data);
            if (data.some((p) => p.menuId === 'ITS010' && p.activeStatus === 'Y')) {
                return `<i class="fa-solid fa-check"></i>`;
            }
            return '';
        }
        function renderQuotationCheckMark(data, type, row) {
            //console.log(data);
            if (data.some((p) => p.menuId === 'QTS020' && p.activeStatus === 'Y')) {
                return `<i class="fa-solid fa-check"></i>`;
            }
            return '';
        }
        function editUser(userId) {
            $.ajax({
                url: '@Url.Action("GetEditUserModal")',
                type: 'POST',
                data: { userId: userId },
                success: (result) => {
                    $("#edit-user").html(result);
                    $("#editModalCenter").modal("show")
                },
                error: (data) => {
                    console.log(data);
                }
            });
        }
        function deleteUserSwal(userId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        url: '@Url.Action("DeleteUser")',
                        type: 'DELETE',
                        data: { userId: userId },
                        success: () => {
                            table.ajax.reload();
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                            });
                        }
                    });
                }
            });
        }
        function getResetPasswordModal(userId) {
            //console.log(userId);
            $.ajax({
                url: '@Url.Action("GetResetPasswordModal")',
                type: 'POST',
                data: { userId: userId },
                success: (result) => {
                    $("#reset-password").html(result);
                    $("#resetPasswordModal").modal("show");
                }
            });
        }

        function resetPassword(userId) {
            Swal.fire({
                title: 'Do you want to reset password?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes'
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        url: '@Url.Action("ResetPassword")',
                        type: 'POST',
                        data: { userId: userId },
                        success: (result) => {
                            Swal.fire({
                                icon: 'success',
                                title: 'Password Reseted',
                                type: 'success'
                            })
                        }
                    });
                }
            });
            $.ajax({
                url: '@Url.Action("ResetPassword")',
                type: 'POST',
                data: { userId: userId },
                success: (result) => {
                    $("#resetPasswordModal").modal("toggle");
                }
            });
        }

         $("form#reset-password").ajaxForm({
             complete: (result) => {
                 var data = result.responseJSON;
                 if (data.isSuccess) {
                     $("#resetPassword").modal("hide");
                     swal.fire({
                         title: 'Successfully updated!',
                         type: 'success'
                     }).then(() => {
                         location.href = '@Url.Action("Index")';
                     });
                 }
                 else {
                     var text = "<p>" + data.message + "</p>";
                     $("#error-content").html(text);
                 }
             }
         });
        function handlerDataTableError(xhr, error, code) {
            var isUnauthorized = code === "Unauthorized";
            if (isUnauthorized) {
                alert("Session Timeout");
            }
        }
    </script>
}